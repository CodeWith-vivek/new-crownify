<script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style>
    body,
    html {
        height: 100%;
        margin: 0;
        font-family: Arial, sans-serif;
    }

    .otp-section {
        display: flex;
        flex-direction: row;
        height: 100vh;
    }

    .left-side {
        background-size: cover;
        width: 50%;
    }

    .right-side {
        padding: 100px;
        width: 50%;
        background-color: #f3f7ff;
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
        flex-direction: column;
    }

    .otp-card {
        background-color: white;
        padding: 30px;
        border-radius: 8px;
        width: 100%;
        max-width: 400px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    .otp-card h2 {
        margin-bottom: 20px;
        font-weight: 700;
        font-size: 24px;
    }

    .otp-input {
        width: 40px;
        height: 40px;
        font-size: 24px;
        text-align: center;
        margin: 0 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .timer {
        margin-top: 15px;
        font-size: 14px;
        color: gray;
    }

    .resend-link {
        color: #007bff;
        cursor: pointer;
    }

    @media (max-width: 768px) {
        .otp-section {
            flex-direction: column;
        }

        .left-side,
        .right-side {
            width: 100%;
            height: 50%;
        }
    }

    h2 {
        width: 300px;
    }

    .timer-container {
        text-align: center;
        flex-direction: row;
        align-items: center;
        margin-top: 15px;
        font-size: 14px;
        color: gray;
    }
</style>

<%- include("../../views/partials/user/headerotp") %>
    <section class="ftco-section">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-10">
                    <div class="wrap d-md-flex">
                        <div class="text-wrap p-4 p-lg-5 d-flex img d-flex align-items-end"
                            style="background-image: url(assets/images/otpverification.webp);">
                            <div class="text w-100">
                                <h2 class="mb-4">Welcome to signup form</h2>
                                <p>Far far away, behind the word mountains, far from the countries Vokalia and
                                    Consonantia,
                                    there live the blind texts.</p>
                            </div>
                        </div>

                        <div class="right-side justify-content-center"
                            style="background-image: url(assets/images/logindesign4.png); background-size: cover; background-position: center; background-repeat: no-repeat;">
                            <h2>OTP for Password Reset</h2>
                            <p>Enter the OTP sent to <strong>
                                    <%= userData.email %>
                                </strong></p>
                            <div class="d-flex justify-content-center mb-3">
                                <input type="text" class="otp-input" maxlength="1" id="otp1"
                                    oninput="moveToNext(this, 'otp2')">
                                <input type="text" class="otp-input" maxlength="1" id="otp2"
                                    oninput="moveToNext(this, 'otp3')" onkeydown="moveToPrev(this, 'otp1', event)">
                                <input type="text" class="otp-input" maxlength="1" id="otp3"
                                    oninput="moveToNext(this, 'otp4')" onkeydown="moveToPrev(this, 'otp2', event)">
                                <input type="text" class="otp-input" maxlength="1" id="otp4"
                                    oninput="moveToNext(this, 'otp5')" onkeydown="moveToPrev(this, 'otp3', event)">
                                <input type="text" class="otp-input" maxlength="1" id="otp5"
                                    oninput="moveToNext(this, 'otp6')" onkeydown="moveToPrev(this, 'otp4', event)">
                                <input type="text" class="otp-input" maxlength="1" id="otp6"
                                    onkeydown="moveToPrev(this, 'otp5', event)">
                            </div>

                            <div class="timer-container">
                                <div class="timer" id="timer">02:00 Sec</div>
                                <div>Don't receive code? <span class="resend-link" id="resendOtp">Re-send</span></div>
                            </div>

                            <button class="btn btn-primary w-100 mt-3" id="verifyOtp">Continue</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <%- include("../../views/partials/user/footer") %>


        <script>
            const timerElement = document.getElementById('timer');
            const verifyOtpButton = document.getElementById('verifyOtp');
            const otpInputs = document.querySelectorAll('.otp-input');
            const resendButton = document.getElementById('resendOtp');
            let countdownTime = 120;
            let intervalId;

            // Load saved countdown time from localStorage
            function loadCountdownTime() {
                const savedTime = localStorage.getItem('countdownTime');
                if (savedTime) {
                    countdownTime = parseInt(savedTime, 10);
                }
            }

            // Save countdown time to localStorage
            function saveCountdownTime() {
                localStorage.setItem('countdownTime', countdownTime);
            }

            // Clear countdown time from localStorage
            function clearCountdownTime() {
                localStorage.removeItem('countdownTime');
            }

            // Function to format time
            function formatTime(seconds) {
                const minutes = Math.floor(seconds / 60);
                const secs = seconds % 60;
                return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            }

            // Start countdown
            function startCountdown() {
                updateTimerDisplay();
                 intervalId = setInterval(() => {
                    countdownTime--;
                    saveCountdownTime(); // Save time on each tick
                    updateTimerDisplay();

                    if (countdownTime <= 0) {
                        clearInterval(intervalId);
                        clearCountdownTime(); // Clear saved time when done
                        disableOtpInputs();
                         displayTimerExpired();
                    }
                }, 1000);
            }

            // Update timer display
            function updateTimerDisplay() {
                    timerElement.innerHTML = formatTime(countdownTime) + ' Sec';
                    const resendButton = document.getElementById('resendOtp');
                    resendButton.style.pointerEvents = countdownTime > 0 ? 'none' : 'auto';
                }

            function displayTimerExpired() {
                timerElement.style.color = 'red';
                timerElement.innerHTML = 'Timer Expired';
                timerElement.style.fontSize = "20px"
                otpInputs.forEach(input => input.disabled = true); // Disable all OTP inputs
            }
            function resetOtpInputs() {
                otpInputs.forEach(input => {
                    input.disabled = false; // Enable all OTP inputs
                    input.value = '';
                });
                otpInputs[0].focus();
            }


            function disableOtpInputs() {
                otpInputs.forEach(input => {
                    input.disabled = true;
                });
            }

            // Enable OTP input fields
            function enableOtpInputs() {
                otpInputs.forEach(input => {
                    input.disabled = false;
                });
            }

            // Initialize countdown on page load
            loadCountdownTime(); // Load time from localStorage
            startCountdown();

            // Move to next input field
            function moveToNext(current, nextFieldID) {
                if (current.value.length === 1 && !isNaN(current.value)) {
                    document.getElementById(nextFieldID).focus();
                } else {
                    current.value = '';  // Clear invalid input
                }
            }

            // Move to previous input field
            function moveToPrev(current, prevFieldID, event) {
                if (event.key === 'Backspace' && current.value.length === 0) {
                    document.getElementById(prevFieldID).focus();
                }
            }

            // OTP input should only allow numbers
            otpInputs.forEach(input => {
                input.addEventListener('input', (e) => {
                    if (!/^\d*$/.test(e.target.value)) {
                        e.target.value = '';  // Only numbers allowed
                    }
                });
            });

            // Verify OTP on button click
            verifyOtpButton.addEventListener('click', () => {
                let otpCode = '';
                otpInputs.forEach(input => otpCode += input.value);

                if (otpCode.length === 6) {
                    fetch('/verify-otp-forgot', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ otp: otpCode })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'OTP Verified',
                                    text: 'Your OTP has been verified successfully.',
                                    confirmButtonText: 'Continue',
                                    customClass: {
                                        popup: 'animated bounceIn'
                                    }
                                }).then(() => {
                                    // Redirect on successful verification
                                    window.location.href = '/reset-password';  // Change this URL as needed
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Invalid OTP',
                                    text: 'Please check the OTP and try again.',
                                    customClass: {
                                        popup: 'animated shake'
                                    }
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'An error occurred while verifying the OTP. Please try again later.',
                            });
                        });
                } else {
                    Swal.fire('Please enter the full 6-digit OTP.');
                }
            });

           resendButton.onclick = () => {
                if (countdownTime > 0) return; // Prevent resending while timer is active

                countdownTime = 120;  // Reset countdown
                timerElement.style.color = 'gray';
                timerElement.style.fontSize = "14px"; // Reset timer color to gray
                saveCountdownTime(); // Save new time
                resetOtpInputs();
                startCountdown(); // Restart countdown

                // Send request to resend OTP
                fetch('/resend-otp-forgot', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ email: sessionStorage.getItem('email') }) // Send the email stored in session
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                icon: 'info',
                                title: 'OTP Resent',
                                text: 'A new OTP has been sent to your email.',
                                showConfirmButton: false,
                                timer: 1500
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message || 'Failed to resend OTP. Please try again.',
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while resending the OTP. Please try again later.',
                        });
                    });
            };
        </script>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-cookie/1.4.1/jquery.cookie.min.js"></script>